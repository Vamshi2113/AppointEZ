doctype html
html(lang="en")
  head
    meta(charset="UTF-8")
    meta(name="viewport", content="width=device-width, initial-scale=1.0")
    title User Dashboard
    link(href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css", rel="stylesheet")
    style.
      body {
          background-image: url('../static/rylan-hill-3o6NXErKXwo-unsplash.jpg');
          background-size: cover;
          background-position: center;
          display: flex;
          justify-content: center;
          align-items: center;
          flex-direction: column;
          height: 100vh;
          margin: 0;
          padding: 0;
      }
      .navbar {
          background-color: rgba(255, 255, 255, 0.5);
          width: 100%;
      }
      .navbar-brand {
          color: #000;
          font-weight: bold;
      }
      .navbar-nav {
          margin-left: auto;
          margin-right: auto;
          display: flex;
          align-items: center;
      }
      .navbar-nav .nav-item {
          margin-right: 15px;
      }
      .navbar-nav .nav-link {
          color: #000;
          font-weight: bold;
      }
      .dashboard-container {
          background: rgba(255, 255, 255, 0.2);
          border-radius: 8px;
          box-shadow: 0 4px 30px rgba(0, 0, 0, 0.1);
          backdrop-filter: blur(5px);
          -webkit-backdrop-filter: blur(5px);
          border: 1px solid rgba(255, 255, 255, 0.3);
          padding: 20px;
          max-width: 800px;
          width: 100%;
          margin: auto;
          height: 80%;
          overflow-y: auto;
      }
      .dashboard-container::-webkit-scrollbar { 
          width: 16px;
          border-radius: 16px;
      }
      .dashboard-container::-webkit-scrollbar-thumb {
          background-color: #888;
          border-radius: 16px;
      }
      .dashboard-container::-webkit-scrollbar-track {
          background-color: #6d6d6d5a;
          border-radius: 16px;
      }
      .card {
          margin-bottom: 20px;
          background-color: rgba(192, 192, 192, 0.3);
          border-radius: 30px;
          transition: opacity 0.5s ease; /* Add opacity transition */
      }
      .card-header {
          text-align: center;
          font-weight: bold;
          border-top-left-radius: 30px;
          border-top-right-radius: 30px;
          padding: 10px 20px;
      }
      .card-body {
          display: flex;
          padding: 20px;
          flex-direction: column;
          align-items: center;
      }
      .btn-cancel-appointment {
          width: 40%;
          border-radius: 35px;
          margin-top: 20px;
      }
      .notification {
          position: fixed;
          bottom: 30px;
          left: 50%;
          transform: translateX(-50%);
          padding: 15px 30px;
          border-radius: 10px;
          background-color: #007bff;
          color: #ffffff;
          box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
          opacity: 0;
          visibility: hidden;
          transition: opacity 0.5s ease, visibility 0.5s ease;
          z-index: 1000;
      }
      .notification.show {
          opacity: 1;
          visibility: visible;
      }

  body
    nav.navbar.navbar-expand-lg.navbar-light
      a.navbar-brand(href="#") #{username}
      button.navbar-toggler(type="button", data-toggle="collapse", data-target="#navbarNav", aria-controls="navbarNav", aria-expanded="false", aria-label="Toggle navigation")
        span.navbar-toggler-icon
      .collapse.navbar-collapse#navbarNav
        ul.navbar-nav
          li.nav-item.active
            a.nav-link(onclick="fetchAppointments()") My appointments
          li.nav-item
            a.nav-link(onclick="fetchNearbyServices()") Nearby Services
          li.nav-item
            a.nav-link(onclick="fetchProfile()") Profile
          li.nav-item
            a.nav-link(onclick="fetchSettings()") Settings
          li.nav-item
            a.nav-link(onclick="myServices()") My Services

    .dashboard-container#dashboard-container
      //- Cards will be dynamically added here

    .notification#notification
      //- Notification container

  script(src="https://code.jquery.com/jquery-3.5.1.slim.min.js")
  script(src="https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js")
  script(src="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js")
  script.
    function myServices(){
      window.location.href = '/serviceproviderDashboard';
    }
    async function cancelAppointment(appointmentId) {
        try {
          const response = await fetch(`user/deleteAppointment/${appointmentId}`, {
            method: 'GET',
            headers: {
              'Authorization': `Bearer ${localStorage.getItem('accessToken')}`
            }
          });
          
          if (response.ok) {
            // Success message or any further action
            console.log(`Appointment ${appointmentId} cancelled successfully.`);
            showNotification('Appointment cancelled successfully');
            const cardToRemove = document.getElementById(appointmentId);
            if (cardToRemove) {
                cardToRemove.style.opacity = '0'; // Fade out animation
                setTimeout(() => {
                  cardToRemove.remove();
                  console.log(`Appointment card with ID ${appointmentId} removed.`);
                }, 500); // Wait for the animation to finish
            } else {
                console.error(`Unable to find card with ID ${appointmentId} to remove.`);
            }
          } else {
            // Error handling
            console.error('Failed to cancel appointment:', response.statusText);
          }
        } catch (error) {
          console.error('Error cancelling appointment:', error);
        }
    }       
    
    function fetchAppointments() {
        fetch('user/myAppointments', {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('accessToken')}`
        }
      })
      .then(response => {
        if (!response.ok) {
          throw new Error('Failed to fetch booked appointments');
        }
        return response.json();
      })
      .then(data => {
        console.log("==",data.message)
        fetchAppointments_generateCards(data.message); // Assuming data is an array of nearby services
      })
      .catch(error => {
        console.error('Error fetching booked appointments:', error);
      });
    }
    

    function fetchNearbyServices() {
      fetch('user/findAppointments', {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('accessToken')}`
        }
      })
      .then(response => {
        if (!response.ok) {
          throw new Error('Failed to fetch nearby services');
        }
        return response.json();
      })
      .then(data => {
        console.log("==",data.message)
        fetchNearbyServices_generateCards(data.message); // Assuming data is an array of nearby services
      })
      .catch(error => {
        console.error('Error fetching nearby services:', error);
      });
    }

    // Similar functions for other navbar options: fetchProfile, fetchSettings, myServices

    function fetchAppointments_generateCards(data) {
      const container = document.getElementById("dashboard-container");
      container.innerHTML = ""; // Clear previous content
      data.forEach(appointment => {
          const card = document.createElement("div");
          card.classList.add("card");
          card.id= appointment.id;
  
          const header = document.createElement("div");
          header.classList.add("card-header");
          header.textContent = appointment.createAppointment.name;
  
          const body = document.createElement("div");
          body.classList.add("card-body");
  
          const title = document.createElement("h5");
          title.classList.add("card-title");
          title.textContent = "Description";
  
          const description = document.createElement("p");
          description.classList.add("card-text");
          description.textContent = appointment.createAppointment.desc;
  
          const from_time = document.createElement("p");
          from_time.classList.add("card-text");
          from_time.textContent = "From Time: " + new Date(appointment.createAppointment.from_time).toLocaleString();
  
          const to_time = document.createElement("p");
          to_time.classList.add("card-text");
          to_time.textContent = "To Time: " + new Date(appointment.createAppointment.to_time).toLocaleString();
  
          const rating = document.createElement("p");
          rating.classList.add("card-text");
          rating.textContent = "Rating: " + (appointment.createAppointment.rating ? appointment.createAppointment.rating + " stars" : "N/A");
  
          const cancelButton = document.createElement("button");
          cancelButton.type = "button";
          cancelButton.classList.add("btn", "btn-danger", "btn-cancel-appointment");
          cancelButton.textContent = "Cancel Appointment";
          cancelButton.addEventListener("click", function() {
              cancelAppointment(appointment.id);
          });
  
          body.appendChild(title);
          body.appendChild(description);
          body.appendChild(from_time);
          body.appendChild(to_time);
          body.appendChild(rating);
          body.appendChild(cancelButton);
  
          card.appendChild(header);
          card.appendChild(body);
  
          container.appendChild(card);
      });
    }

    function fetchNearbyServices_generateCards(data) {
      const container = document.getElementById("dashboard-container");
      container.innerHTML = ""; // Clear previous content

      data.forEach(appointment => {
        const card = document.createElement("div");
        card.classList.add("card");
        card.id = appointment.id;

        const header = document.createElement("div");
        header.classList.add("card-header");
        header.textContent = appointment.name;

        const body = document.createElement("div");
        body.classList.add("card-body");

        const title = document.createElement("h5");
        title.classList.add("card-title");
        title.textContent = "Description";

        const description = document.createElement("p");
        description.classList.add("card-text");
        description.textContent = appointment.desc; 

        const from_time = document.createElement("p");
        from_time.classList.add("card-text");
        from_time.textContent = "From Time: " + appointment.from_time;

        const to_time = document.createElement("p");
        to_time.classList.add("card-text");
        to_time.textContent = "To Time: " + appointment.to_time;

        const rating = document.createElement("p");
        rating.classList.add("card-text");
        if(!appointment.rating){
            appointment.rating=0;
        }
        rating.textContent = "Rating: " + appointment.rating +" stars";

        const cost = document.createElement("p");
        cost.classList.add("card-text");
        cost.textContent = "cost: " + appointment.cost +" Credits";

        const bookButton = document.createElement("button");
        bookButton.type = "button";
        bookButton.classList.add("btn", "btn-danger", "btn-cancel-appointment");
        bookButton.textContent = "Book Appointment";
        bookButton.addEventListener("click", function() {
            bookAppointment(appointment.id);
        });

        body.appendChild(title);
        body.appendChild(description);
        body.appendChild(from_time);
        body.appendChild(to_time);
        body.appendChild(rating);
        body.appendChild(cost);
        body.appendChild(bookButton);

        card.appendChild(header);
        card.appendChild(body);

        container.appendChild(card);
      });
    }
    async function bookAppointment(appointmentId) {
        try {
            const response = await fetch(`user/bookAppointment/${appointmentId}`, {
                method: 'GET',
                headers: {
                    'Authorization': `Bearer ${localStorage.getItem('accessToken')}`
                }
            });
    
            if (response.ok) {
                // Success message or any further action
                console.log(`Appointment ${appointmentId} booked successfully.`);
                showNotification('Appointment booked successfully');
            } else {
                // Error handling
                const res = await response.json(); // Parse the response body as JSON
                showNotification(res.message); // Display the error message
                console.error('Failed to book appointment:', res.message);
            }
        } catch (error) {
            console.error('Error booking appointment:', error);
        }
    }


    function logout() {
      // Code to handle logout
      console.log("Logout clicked.");
    }

    // You can implement similar functions for other navbar options

    // Initial fetch
    fetchAppointments();

    // Verify JWT token and handle response
    async function verifyToken() {
        if(!localStorage.getItem('accessToken')){
            return window.location.href = '/login';
        }
      try {
        const response = await fetch('/verify', {
          method: 'GET',
          headers: {
            'Authorization': `Bearer ${localStorage.getItem('accessToken')}`
          }
        });

        if (response.ok) {
          const res=await response.json()
          const username =res.user;

         document.querySelector('.navbar-brand').innerText = `${username} || ₹ ${res.credits}`;
          
        } else {
          // Token is invalid, redirect to login page
          window.location.href = '/login';
        }
      } catch (error) {
        console.error('Error verifying token:', error);
      }
    }

    // Call verifyToken function when the page loads
    window.addEventListener('load', verifyToken);

    // Notification function
    function showNotification(text) {
        const notification = document.getElementById('notification');
        notification.textContent = text;
        notification.classList.add('show');

        setTimeout(() => {
            notification.classList.remove('show');
        }, 1500); // Hide notification after 3 seconds
    }
